#!/usr/bin/env ruby

require 'rubygems'
require 'bundler/setup'
require 'table_print' # TODO: Should be required in another file
require_relative 'lib/yabs'

application = Yabs::Application.new('yabs')
exit application.run

config = YAML.load_file(application.config_file('config.yml'))

directories = config['directories']

vault = "#{config['vault']['scheme']}#{config['vault']['path']}"

hostname = `hostname`.chomp

@packages = directories.map do |directory|
  remote = File.join(vault, hostname, directory)
  Yabs::Package.new directory, remote
end

def find_package(directory)
  directory = File.expand_path(directory)
  @packages.detect { |p| p.directory == directory }.tap do |package|
    fail "No package found for '#{directory}'" unless package
  end
end

case ARGV.first
when 'restore'
  package = find_package(ARGV[1] || '.')
  fail 'You must provide a destination' unless ARGV[2]
  destination = File.expand_path(ARGV[2])

  puts "Restore #{package.directory} from #{vault} to #{destination} (y/N)?"
  char = $stdin.gets.chomp
  unless char.casecmp('y').zero?
    puts 'Cancelling...'
    exit
  end
  puts 'Restoring...'
  package.restore(destination)
  puts 'Backup restored'
when 'log'
  package = find_package(ARGV[1] || '.')

  puts "Package versions for #{package.directory} on #{vault}"
  puts
  package.versions.each do |version|
    puts "[#{version.index}] #{version.timestamp} (#{version.type})"
  end
when 'show'
  package = find_package(ARGV[1] || '.')
  version = package.version(:last)

  puts "Package content for #{package.directory} on #{vault} (version: "\
       "#{version.index})"
  puts
  puts package.content(:last)
when 'backup'
  # TODO: First backup should always be full
  # Backup all local packages
  @packages.each do |p|
    puts "- #{p.directory}"
  end
  puts
  puts "Backup those packages to #{vault} (y/N)?"
  char = $stdin.gets.chomp
  unless char.casecmp('y').zero?
    puts 'Cancelling...'
    exit
  end
  puts 'Backuping...'
  @packages.each do |p|
    puts "#{p.directory}..."
    p.backup # 'full'
  end
  puts 'Backup completed'
when 'index', nil
  # TODO: This seems to create distant folder (which are useless)
  # List all local packages
  puts 'Local packages'
  puts
  puts "Backup store: #{vault}"
  puts
  content = @packages.map do |p|
    v = p.version(:last) || Yabs::PackageVersion.blank
    {
      folder: p.directory,
      version: v.index,
      last_backup: v.timestamp
    }
  end
  tp content
  puts
  puts 'Hint: Version numbering starts at 0.'
else
  puts "Command not recognized: #{ARGV.first}"
end
